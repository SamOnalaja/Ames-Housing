****************************;
* READ IN & CLEAN UP DATA   ;
****************************;
 %MACRO READ_DATA(PATH,NAME,NUM_OBS);
* REPLACE NA WITH MISSING;
DATA _NULL_;
 	INFILE "&PATH.&NAME..csv" DSD TRUNCOVER;
 	FILE "&PATH.&NAME._missing.csv" DSD;
 	LENGTH WORD $200;
 	
 	* LOOP THROUGH EACH OF THE 81 COLUMNS AND REPLACE 'NA' WITH .;
 	DO I=1 TO &NUM_OBS;
       	INPUT WORD @;
       	IF I IN (7,31,32,33,34,36,58,59,61,64,65,73,74,75) THEN DO;
            	PUT WORD@;
       	END;
       	ELSE DO;
            	IF WORD='NA' THEN WORD = .;
            	PUT WORD@;
       	END;
 	END;
 	
 	* OUTPUT THE RECORD TO THE FILE;
 	PUT;
RUN;
 
* IMPORT THE FILE WHERE NAs ARE REPLACED WITH .;
PROC IMPORT DATAFILE="&PATH.&NAME._missing.csv" OUT=&NAME REPLACE;
 	GUESSINGROWS=MAX;
RUN;
%MEND;
 
* CREATE A DATASET WITH THE LIST OF FILES TO READ IN;
DATA LIST;
 	* THIS IS WHERE YOU UPDATE WITH THE LOCATION OF YOUR FILES;
 	PATH='/data/bnsf/ib/hubops/jford/data_science/kaggle/';
 	NAME='train'; NUM_OBS = 81; OUTPUT;
 	NAME='test'; NUM_OBS = 80; OUTPUT;
RUN;
 
* EXECUTE THE MACRO TO LOOP THROUGH THE FILES BEING READ IN;
DATA _NULL_;
 	SET LIST;
    CALL EXECUTE('%READ_DATA('||PATH||','||NAME||','||NUM_OBS||')');
RUN;
 
* CREATE DUMMY VARIABLES FOR NEIGHBORHOOD AND ONLY KEEP 3 NEIGHBORHOODS;
DATA TRAIN1;
 	SET TRAIN;
 	IF NEIGHBORHOOD IN ('Edwards','BrkSide','NAmes');
 	IF NEIGHBORHOOD = 'Edwards' THEN DO;
       	N1=1;
       	N2=0;
 	END;
 
 	ELSE IF NEIGHBORHOOD = 'BrkSide' THEN DO;
       	N1=0;
       	N2=1;
 	END;
 
 	ELSE DO;
       	N1=0;
       	N2=0;
 	END;
 
 	GRLIVAREA = GRLIVAREA/100;
 
 	SALEPRICE_LOG = LOG(SALEPRICE);
 	GRLIVAREA_LOG = LOG(GRLIVAREA);
RUN;
 
****************************;
* WITH OUTLIERS         	;
****************************;
PROC MEANS DATA=TRAIN1;
RUN;
 
* CREATE INTERACTION VARIABLES;
DATA TRAIN2;
 	SET TRAIN1;
 	CENT1 = (GRLIVAREA_LOG - 13.0183)*(N1 - 0.2610966);
 	CENT2 = (GRLIVAREA_LOG - 13.0183)*(N2 - 0.1514360);
 
 	CENT1_LOG = (GRLIVAREA_LOG - 2.5141431)*(N1 - 0.2610966);
 	CENT2_LOG = (GRLIVAREA_LOG - 2.5141431)*(N2 - 0.1514360);
 
 	GRCENT=(GRLIVAREA_LOG - 2.5141431);
 
RUN;
ODS GRAPHICS ON;
 
SYMBOL1 V='SQUAREFILLED' C="#58508D" I=NONE;
SYMBOL2 V='DOT' C=ROSE I=NONE;
SYMBOL3 V='TRIANGLEFILLED' C=BIOY I=NONE;
 
*EDA AND REGRESSIONS WITHOUT TRANSFORMATIONS;
PROC GPLOT DATA=TRAIN2;
PLOT SALEPRICE*GRLIVAREA=NEIGHBORHOOD;
TITLE1 'Figure 1: House Sales Price and Square Footage by Neighborhood';
TITLE2 'Without Transformations';
RUN;

*EDA AND REGRESSIONS WITH TRANSFORMATIONS;
PROC GPLOT DATA=TRAIN2;
PLOT SALEPRICE_LOG*GRLIVAREA_LOG=NEIGHBORHOOD;
TITLE1 'Figure 2: House Sales Price and Square Footage by Neighborhood';
TITLE2 'With Log Transformations';
RUN;

PROC REG DATA=TRAIN2;
 	MODEL SALEPRICE = N1 N2 GRLIVAREA /VIF;
 	TITLE1 'Figure 3: Simple Linear Regression';
 	TITLE2 'No Transformations';
RUN;

PROC REG DATA=TRAIN2 plots=all;
 	MODEL SALEPRICE_LOG = N1 N2 GRLIVAREA_LOG CENT1_LOG CENT2_LOG/VIF;
 	TITLE1 'Figure 5: Simple Linear Regression';
 	TITLE2 'Log-Log Transformation';
RUN;

****************************;
* WITHOUT OUTLIERS      	;
****************************;
DATA TRAIN_NO_OUTLIERS;
 	SET TRAIN1;
 	IF GRLIVAREA < 4000/100;
RUN;
 
PROC MEANS DATA=TRAIN_NO_OUTLIERS;
RUN;
 
DATA TRAIN_NO_OUTLIERS1;
 	SET TRAIN_NO_OUTLIERS;
 	CENT1 = (GRLIVAREA_LOG - 12.8158530)*(N1 - 0.2572178);
 	CENT2 = (GRLIVAREA_LOG - 12.8158530)*(N2 - 0.1522310);
 
 	CENT1_LOG = (GRLIVAREA_LOG - 2.5066639)*(N1 - 0.2572178);
 	CENT2_LOG = (GRLIVAREA_LOG - 2.5066639)*(N2 - 0.1522310);
RUN;
PROC GPLOT DATA=TRAIN_NO_OUTLIERS1;
PLOT SALEPRICE * GRLIVAREA=NEIGHBORHOOD;
TITLE1 'Figure 7: House Sales Price and Square Footage by Neighborhood';
TITLE2 'Without Outliers, Without Transformations';
RUN;

PROC GPLOT DATA=TRAIN_NO_OUTLIERS1;
PLOT SALEPRICE_LOG * GRLIVAREA_LOG=NEIGHBORHOOD;
TITLE1 'Figure 8: House Sales Price and Square Footage by Neighborhood';
TITLE2 'Without Outliers, Without Log Transformations';
RUN;

PROC REG DATA=TRAIN_NO_OUTLIERS1 PLOTS=ALL;
MODEL SALEPRICE = N1 N2 GRLIVAREA /VIF;
TITLE1 'Figure 9: Simple Linear Regression';
TITLE2 'Without Outliers, Without Transformations';
RUN;

PROC REG DATA=TRAIN_NO_OUTLIERS1 PLOTS=ALL;
 	MODEL SALEPRICE_LOG = N1 N2 GRLIVAREA_LOG CENT1_LOG CENT2_LOG/VIF CLB CLM CLI; */
 	TITLE1 'Figure 11: Linear Regression';
 	TITLE2 'Without Outliers, Log-Log Transformations';
RUN;

PROC SGPLOT DATA=TRAIN_NO_OUTLIERS1 ;
 	TITLE "Sales Price by Living Area and Neighborhood";
 	REG Y=SALEPRICE_LOG X=GRLIVAREA_LOG / GROUP=NEIGHBORHOOD ;
 	TITLE1 'Figure 14: Linear Regression';
 	TITLE2 'Without Outliers, Log-Log Transformations';
RUN;

* DATA PREP;
DATA TRAIN2;
 	SET TRAIN;
 
 	SALEPRICE_LOG = LOG(SALEPRICE);
 
 	IF GRLIVAREA < 4000;
 
 	BATHROOMS = .5*HALFBATH + FULLBATH;
 	ROOMS = BATHROOMS + TOTRMSABVGRD;
 
 	SQFT = (BSMTFINSF1 + GRLIVAREA)/100;
 	SQFT_LOG = LOG(SQFT);
 
 	GRLIVAREA = GRLIVAREA/100;
 	GRLIVAREA_LOG = LOG(GRLIVAREA);
RUN;
 
* CORRELATION MATRIX;
* CODE FROM HTTPS://BLOGS.SAS.COM/CONTENT/SASDUMMY/2013/06/12/CORRELATIONS-MATRIX-HEATMAP-WITH-SAS/;
 
%MACRO PREPCORRDATA(IN=,OUT=);
  /* RUN CORR MATRIX FOR INPUT DATA, ALL NUMERIC VARS */
  PROC CORR DATA=&IN. NOPRINT
    PEARSON
    OUTP=WORK._TMPCORR
    VARDEF=DF
  ;
  RUN;
 
  /* PREP DATA FOR HEAT MAP */
DATA &OUT.;
  KEEP X Y R;
  SET WORK._TMPCORR(WHERE=(_TYPE_="CORR"));
  ARRAY V{*} _NUMERIC_;
  X = _NAME_;
  DO I = DIM(V) TO 1 BY -1;
    Y = VNAME(V(I));
    R = V(I);
    /* CREATES A LOWER TRIANGULAR MATRIX */
    IF (I<_N_) THEN
      R=.;
    OUTPUT;
  END;
RUN;
 
PROC DATASETS LIB=WORK NOLIST NOWARN;
  DELETE _TMPCORR;
QUIT;
%MEND;
 
ODS PATH WORK.MYSTORE(UPDATE) SASHELP.TMPLMST(READ);
 
PROC TEMPLATE;
  DEFINE STATGRAPH CORRHEATMAP;
   DYNAMIC _TITLE;
    BEGINGRAPH;
      ENTRYTITLE _TITLE;
      RANGEATTRMAP NAME='MAP';
      RANGE -1 - 1 / RANGECOLORMODEL=(CXD8B365 CXF5F5F5 CX5AB4AC);
      ENDRANGEATTRMAP;
      RANGEATTRVAR VAR=R ATTRVAR=R ATTRMAP='MAP';
      LAYOUT OVERLAY /
    	XAXISOPTS=(DISPLAY=(LINE TICKS TICKVALUES))
    	YAXISOPTS=(DISPLAY=(LINE TICKS TICKVALUES));
    	HEATMAPPARM X = X Y = Y COLORRESPONSE = R /
      	XBINAXIS=FALSE YBINAXIS=FALSE
      	NAME = "HEATMAP" DISPLAY=ALL;
    	CONTINUOUSLEGEND "HEATMAP" /
      	ORIENT = VERTICAL LOCATION = OUTSIDE TITLE="PEARSON CORRELATION";
      ENDLAYOUT;
    ENDGRAPH;
  END;
RUN;
 
ODS GRAPHICS /HEIGHT=2400 WIDTH=2400 IMAGEMAP;
 
%PREPCORRDATA(IN=TRAIN2(DROP=ID) ,OUT=CORR_MATRIX);
PROC SGRENDER DATA=CORR_MATRIX TEMPLATE=CORRHEATMAP;
   DYNAMIC _TITLE_="CORR MATRIX";
RUN;

* EDA FOR CATEGORICAL VARIABLES;
ODS GRAPHICS /HEIGHT=600 WIDTH=600 IMAGEMAP;
 
PROC SGPANEL DATA=TRAIN2 NOAUTOLEGEND;
 	TITLE "Figure 16: Sales Price by Central Air";
 	PANELBY CENTRALAIR;
 	HISTOGRAM SALEPRICE_LOG;
 	DENSITY SALEPRICE_LOG;
RUN;

PROC SGPANEL DATA=TRAIN2 NOAUTOLEGEND;
 	TITLE "Figure 17: Sales Price by Building Type";
 	PANELBY BldgType;
 	HISTOGRAM SALEPRICE_LOG;
 	DENSITY SALEPRICE_LOG;
RUN;

PROC SGPANEL DATA=TRAIN2(WHERE=(MISSING(ROOFMATL)=0)) NOAUTOLEGEND;
 	TITLE "Figure 18: Sales Price by Roof Material";
 	PANELBY ROOFMATL /COLUMNS=4;
 	HISTOGRAM SALEPRICE_LOG;
RUN;

ODS GRAPHICS /HEIGHT=600 WIDTH=2400 IMAGEMAP;
PROC SGPANEL DATA=TRAIN2 NOAUTOLEGEND;
 	TITLE "Figure 19: Sales Price by Neighborhood";
 	PANELBY NEIGHBORHOOD / columns=13;
 	HISTOGRAM SALEPRICE_LOG;
 	DENSITY SALEPRICE_LOG;
RUN;

PROC GLMSELECT DATA=TRAIN2;
 	CLASS EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD;
 	MODEL SALEPRICE_LOG =  LOTAREA WOODDECKSF OPENPORCHSF  FIREPLACES MASVNRAREA  GARAGEYRBLT YEARBUILT ROOMS GARAGEAREA GARAGECARS OVERALLQUAL SQFT_LOG EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD
 	  / SELECTION = FORWARD(STOP=CV) CVMETHOD=RANDOM(5) STATS=ADJRSQ;
 	TITLE 'Figure 20: Forward Selection Model';
RUN;

PROC GLMSELECT DATA=TRAIN2;
CLASS EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD;
MODEL SALEPRICE_LOG =  LOTAREA WOODDECKSF OPENPORCHSF  FIREPLACES MASVNRAREA  GARAGEYRBLT YEARBUILT ROOMS GARAGEAREA GARAGECARS OVERALLQUAL SQFT_LOG EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD
     / SELECTION = BACKWARD(STOP=CV) CVMETHOD=RANDOM(5) STATS=ADJRSQ;
 	TITLE 'Figure 21: Backward Selection Model';
RUN;

PROC GLMSELECT DATA=TRAIN2;
 	CLASS EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD;
 	MODEL SALEPRICE_LOG =  LOTAREA WOODDECKSF OPENPORCHSF  FIREPLACES MASVNRAREA  GARAGEYRBLT YEARBUILT ROOMS GARAGEAREA GARAGECARS OVERALLQUAL SQFT_LOG EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD
 	/ SELECTION = STEPWISE(STOP=CV) CVMETHOD=RANDOM(5) STATS=ADJRSQ;
 	TITLE 'Figure 22: Stepwise Selection Model';
RUN;

* CUSTOM MODEL;
PROC GLM DATA=TRAIN2 PLOTS=ALL;
 	CLASS NEIGHBORHOOD BLDGTYPE ROOFMATL CENTRALAIR;
 	MODEL SALEPRICE_LOG = OVERALLQUAL OVERALLCOND YEARBUILT ROOFMATL BSMTFINSF1 TOTALBSMTSF GRLIVAREA_LOG CENTRALAIR NEIGHBORHOOD | BLDGTYPE / SOLUTION CLPARM ;
RUN;
 
PROC GLMSELECT DATA=TRAIN2 PLOTS=ALL;
 	CLASS NEIGHBORHOOD BLDGTYPE ROOFMATL CENTRALAIR;
 	MODEL SALEPRICE_LOG = OVERALLQUAL OVERALLCOND YEARBUILT ROOFMATL BSMTFINSF1 TOTALBSMTSF GRLIVAREA_LOG CENTRALAIR NEIGHBORHOOD | BLDGTYPE / SELECTION=NONE STATS=PRESS;
RUN;

* KAGGLE SUBMISSIONS;
DATA TEST2;
 	SET TEST;
 
 	SALEPRICE_LOG = LOG(SALEPRICE);
 
 	BATHROOMS = .5*HALFBATH + FULLBATH;
 	ROOMS = BATHROOMS + TOTRMSABVGRD;
 
 	SQFT = (BSMTFINSF1 + GRLIVAREA)/100;
 	SQFT_LOG = LOG(SQFT);
 
 	GRLIVAREA = GRLIVAREA/100;
 	GRLIVAREA_LOG = LOG(GRLIVAREA);
RUN;
 
* COMBINE TRAIN AND TEST DATASETS;
DATA KAGGLE;
 	SET TRAIN2 TEST2;
RUN;
 
* CALCULATE MEAN BY NEIGHBORHOOD FOR ANY MISSING PREDICTIONS;
PROC SQL;
 	CREATE TABLE MEAN_PRICE AS
 	SELECT NEIGHBORHOOD
 	  	,AVG(SALEPRICE)
 	FROM TRAIN2
 	GROUP BY 1
 	;
QUIT;
 
* FORWARD SELECTION MODEL;
PROC GLMSELECT DATA=KAGGLE;
 	CLASS EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD;
 	MODEL SALEPRICE_LOG =  LOTAREA WOODDECKSF OPENPORCHSF  FIREPLACES MASVNRAREA  GARAGEYRBLT YEARBUILT ROOMS GARAGEAREA GARAGECARS OVERALLQUAL SQFT_LOG EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD
 	  / SELECTION = FORWARD(STOP=CV) CVMETHOD=RANDOM(5) STATS=ADJRSQ;
 	OUTPUT OUT=RESULTS_FORWARD P=PREDICT;
RUN;
 
* BACKWARD SELECTION MODEL;
PROC GLMSELECT DATA=KAGGLE;
 	CLASS EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD;
 	MODEL SALEPRICE_LOG =  LOTAREA WOODDECKSF OPENPORCHSF  FIREPLACES MASVNRAREA  GARAGEYRBLT YEARBUILT ROOMS GARAGEAREA GARAGECARS OVERALLQUAL SQFT_LOG EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD
 	  / SELECTION = BACKWARD(STOP=CV) CVMETHOD=RANDOM(5) STATS=ADJRSQ;
 	OUTPUT OUT=RESULTS_BACKWARD P=PREDICT;
RUN;
 
* STEPWISE SELECTION MODEL;
PROC GLMSELECT DATA=KAGGLE;
 	CLASS EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD;
 	MODEL SALEPRICE_LOG =  LOTAREA WOODDECKSF OPENPORCHSF  FIREPLACES MASVNRAREA  GARAGEYRBLT YEARBUILT ROOMS GARAGEAREA GARAGECARS OVERALLQUAL SQFT_LOG EXTERQUAL BSMTQUAL KITCHENQUAL GARAGEFINISH GARAGETYPE HEATINGQC BSMTEXPOSURE LOTSHAPE GARAGECOND CENTRALAIR FOUNDATION NEIGHBORHOOD
 	  / SELECTION = STEPWISE(STOP=CV) CVMETHOD=RANDOM(5) STATS=ADJRSQ;
 	OUTPUT OUT=RESULTS_STEPWISE P=PREDICT;
RUN;
 
* CUSTOM MODEL;
PROC GLMSELECT DATA=kaggle PLOTS=ALL;
 	CLASS NEIGHBORHOOD BLDGTYPE ROOFMATL CENTRALAIR;
 	MODEL SALEPRICE_LOG = OVERALLQUAL OVERALLCOND YEARBUILT ROOFMATL BSMTFINSF1 TOTALBSMTSF GRLIVAREA_LOG CENTRALAIR NEIGHBORHOOD | BLDGTYPE / SELECTION=NONE CVMETHOD=RANDOM(5) stats=press;
 	OUTPUT OUT=RESULTS_CUSTOM P=PREDICT;
RUN;
 
%MACRO FILE_SUBMISSION(FILE);
DATA RESULTS2;
SET &FILE;
IF ID > 1460;
SALEPRICE = EXP(PREDICT);
 
* REPLACE ANY MISSING PREDICTIONS WITH THE MEAN SALES PRICE FOR THE NEIGHBORHOOD;
if missing(predict) = 1 then do;
if neighborhood = "Blmngtn" then saleprice= 194870.8824;
else if neighborhood = "Blueste" then saleprice=137500;
else if neighborhood = "BrDale" then saleprice=  104493.75;
else if neighborhood = "BrkSide" then saleprice=124834.0517;
else if neighborhood = "ClearCr" then saleprice=212565.4286;
else if neighborhood = "CollgCr" then saleprice=197965.7733;
else if neighborhood = "Crawfor" then saleprice=210624.7255;
else if neighborhood = "Edwards" then saleprice=127318.5714;
else if neighborhood = "Gilbert" then saleprice=192854.5063;
else if neighborhood = "IDOTRR" then saleprice=  100123.7838;
else if neighborhood = "MeadowV" then saleprice=98576.47059;
else if neighborhood = "Mitchel" then saleprice=156270.1225;
else if neighborhood = "NAmes" then saleprice=   145847.08;
else if neighborhood = "NPkVill" then saleprice=142694.4444;
else if neighborhood = "NWAmes" then saleprice=  189050.0685;
else if neighborhood = "NoRidge" then saleprice=314028.4103;
else if neighborhood = "NridgHt" then saleprice=316270.6234;
else if neighborhood = "OldTown" then saleprice=128225.3009;
else if neighborhood = "SWISU" then saleprice=   142591.36;
else if neighborhood = "Sawyer" then saleprice=  136793.1351;
else if neighborhood = "SawyerW" then saleprice=186555.7966;
else if neighborhood = "Somerst" then saleprice=225379.8372;
else if neighborhood = "StoneBr" then saleprice=310499;
else if neighborhood = "Timber" then saleprice=  242247.4474;
else if neighborhood = "Veenker" then saleprice=238772.7273;
end;
 
KEEP ID SALEPRICE;
RUN;
 
PROC EXPORT DATA=RESULTS2
FILE="/data/bnsf/ib/hubops/jford/data_science/kaggle/&FILE..csv" replace;
RUN;
%MEND;
 
DATA LIST;
 	LENGTH FILE $16.;
 	FILE="RESULTS_FORWARD"; OUTPUT;
 	FILE="RESULTS_BACKWARD"; OUTPUT;
 	FILE="RESULTS_STEPWISE"; OUTPUT;
 	FILE="RESULTS_CUSTOM"; OUTPUT;
RUN;
 
DATA _NULL_;
SET LIST;
CALL EXECUTE('%FILE_SUBMISSION('||FILE||')');
RUN;